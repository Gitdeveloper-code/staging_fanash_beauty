


export const authConfig = {
    pages: {
      signIn: "/login",
    },
    providers: [],
    callbacks: {
      async jwt({ token, user }) {
        if (user) {
          token.id = user.id;
          token.isAdmin = user.isAdmin;
        }
        return token;
      },
      async session({ session, token }) {
        if (token) {
          session.user.id = token.id;
          session.user.isAdmin = token.isAdmin;
        }
        return session;
      },
      authorized({ auth, request }) {
        const user = auth?.user;
        const isOnAdminPanel = request.nextUrl?.pathname.startsWith("/admin");
        const isOnBlogPage = request.nextUrl?.pathname.startsWith("/blog");
        const isOnLoginPage = request.nextUrl?.pathname.startsWith("/login");
  
        // ONLY ADMIN CAN REACH THE ADMIN DASHBOARD
  
        if (isOnAdminPanel && !user?.isAdmin) {
          return false;
        }
  
        // ONLY AUTHENTICATED USERS CAN REACH THE BLOG PAGE
  
        if (isOnBlogPage && !user) {
          return false;
        }
  
        // ONLY UNAUTHENTICATED USERS CAN REACH THE LOGIN PAGE
  
        if (isOnLoginPage && user) {
          return Response.redirect(new URL("/", request.nextUrl));
        }
  
        return true
      },
    },
  };





































// 'use client'

// import React, { createContext, useContext, useState } from 'react';
// import Job from '../addJobs/page'

// type User = {
//     role: 'admin' | 'user';
//   };
  
//   type AuthContextType = {
//     user: User | null;
//     login: () => void;
//     logout: () => void;
//   };

//   const AuthContext = createContext<AuthContextType | undefined>(undefined);

// export const AuthProvider: React.FC = ({children}) => {
//     const [user, setUser] = useState<User | null>(null);
  
//     const login = () => {
//       // Logic to authenticate user
//       setUser({ role: 'admin' }); // Example: Set user role as admin
//     };
  
//     const logout = () => {
//       setUser(null);
//     };
  
//     return (
//       <AuthContext.Provider value={{ user, login, logout }}>
//         {children}
//       </AuthContext.Provider>
//     );
//   };
  
//   export const useAuth = () => {
//     const context = useContext(AuthContext);
//     if (!context) {
//       throw new Error('useAuth must be used within an AuthProvider');
//     }
//     return context;
//   };
  

